plugins {
    id 'java'
    id 'io.qameta.allure' version '2.12.0'
    id 'io.freefair.lombok' version '8.11'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.11.3'
}

allure {
    version = '2.32.0'
}

dependencies {
    implementation('com.microsoft.playwright:playwright:1.49.0')

    implementation platform("org.junit:junit-bom:5.11.4")
    implementation 'org.junit.jupiter:junit-jupiter-api'
    implementation 'org.junit.jupiter:junit-jupiter-params'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'org.aeonbits.owner:owner:1.0.12'
    implementation 'com.github.javafaker:javafaker:1.0.2'

    implementation 'io.rest-assured:rest-assured:5.5.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.2'

    implementation platform("io.qameta.allure:allure-bom:2.29.1")
    implementation 'io.qameta.allure:allure-junit5'
    implementation 'io.qameta.allure:allure-rest-assured'

    implementation 'org.slf4j:slf4j-api:2.0.16'
    implementation 'ch.qos.logback:logback-classic:1.5.15'
}

test {
    systemProperties(System.getProperties())
    useJUnitPlatform()
    ignoreFailures = true
}

tasks.register('installPlaywrightDeps', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.microsoft.playwright.CLI'
    args = ['install-deps']
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.register('printCompileJavaVersion') {
    doLast {
        println "Java version for compilation: ${JavaVersion.current()}"
        println "Java home: ${System.getProperty('java.home')}"
        println "JAVA_HOME: ${System.getenv("JAVA_HOME")}"
    }
}

//task to generate Playwright code
tasks.register('playwrightcodegen', JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    mainClass = 'com.microsoft.playwright.CLI'
    args 'codegen'
    args 'www.sogeti.com'
    args 'firefox'
}

//task to play recorded trace
tasks.register('playwrighttrace', JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    mainClass = 'com.microsoft.playwright.CLI'
    args 'show-trace'
    args 'trace.zip'
}